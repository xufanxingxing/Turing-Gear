{"version":3,"sources":["app/navbar/Navbar.js","app/dashboard/table/Table.js","app/dashboard/header/Header.js","app/dashboard/sidenav/SideNav.js","app/dashboard/Dashboard.js","app/App.js","serviceWorker.js","index.js","app/navbar/image/logo.jpg"],"names":["console","log","logo","Navbar","react_default","a","createElement","className","style","width","height","padding","src","COLUMNS","COLUMN_MAP","Map","i","length","set","Table","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mockData","displayColumnHeaders","push","rows","rowName","key","map","row","idx","_this2","TableDataRows","_loop","mockDataRow","rowData","columnName","currentDataRow","concat","get","Button","color","includes","class","TableColumns","Component","Header","Grid","container","direction","Typography","component","variant","align","marginTop","TextField","label","helperText","fullWidth","SideNav","state","isDevicesCollapseOpen","isLabelsCollapseOpen","setState","text","type","ListItem","button","onClick","modifyDevicesCollapse","ListItemIcon","MoveToInbox","ListItemText","primary","titleText","ExpandLess","ExpandMore","Divider","Collapse","in","timeout","unmountOnExit","List","disablePadding","modifyLabelsCollapse","Dashboard","header_Header","justify","dashboard_sidenav_SideNav","table_Table","App","navbar_Navbar","dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ff4814a6.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './Navbar.css';\nimport logo from './image/logo.jpg'; // Tell Webpack this JS file uses this image\nimport { relative } from 'path';\n\nconsole.log(logo); // /logo.84287d09.png\n// import logo from './image/logo.jpg';\n\nfunction Navbar() {\n    return (\n        <div className='navbar'>\n            <div className='top-logo'>\n                <img \n                    style={{width: 40, height: 40, padding:5}}\n                    src={logo}\n                />\n            </div>\n        </div>\n        // <img src={logo} alt=\"logo\" />;\n    );\n}\n\n\nexport default Navbar;\n\n","import React, { Component } from 'react';\nimport mockData from './mock.json';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './table.css';\n\n\nimport { Typography, Button } from '@material-ui/core';\n\n\n\n\nconst COLUMNS = [\n    'Nimbo ID',\n    'Company',\n    'Local Time',\n    'Public Wifi',\n    'Robox',\n    'Nimbo App',\n    'Slam',\n    'Software Version',\n    'Hardware Version',\n    'Mode',\n    'Live Streaming',\n    'Total Patrol Time',\n    'Log',\n];\n\n\nconst COLUMN_MAP = new Map();\n\nfor (let i = 0; i < COLUMNS.length; i++) {\n    COLUMN_MAP.set(COLUMNS[i], i);\n};\n\n/** 定义一个React Component class. */\nclass Table extends Component {\n    constructor() {\n        super(); /** 实现继承parent component的所有功能. */\n        this.mockData = mockData;\n    }\n\n\n    // Question:  这是一个function 吗？\n    TableColumns() {\n\n        const displayColumnHeaders = [];\n        for (let i = 0; i < COLUMNS.length; i++) {\n            displayColumnHeaders.push(<th >{COLUMNS[i]}</th>);\n        }\n        return (\n            <tr>\n\n                {/* Question：老师这里真的没有看懂。。。 */}\n                {/* 这里的的COLUMNS不是只有一列元素吗？ colum和idx分别代表什么？？？？？？？？？？？？？？ */}\n                {/* {COLUMNS.map((elem, index) => {return <th key={index}>{elem}</th>;})} */}\n\n                {displayColumnHeaders}\n            </tr>\n        );\n    }\n\n\n    TableDataRow(rows, rowName) {\n        return (\n            <tr key={rowName}>\n                {rows.map((row, idx) => {\n                    return <td key={idx}>{row}</td>;\n                })}\n            </tr>\n        );\n    }\n\n    /** 生成HTML component. render() 是React library 用来生成并输出HTML组件的method. */\n    render() {\n        // const tableDataRow1 = COLUMNS.map(columnName => this.mockData[0][columnName]);\n        // const tableDataRow2 = COLUMNS.map(columnName => this.mockData[1][columnName]);\n        // const TableDataRows = this.mockData.map((mockDataRow, idx) => {\n        //     return this.TableDataRow(COLUMNS.map(columnName => mockDataRow[columnName]), `row${idx}`);\n        // })\n\n\n        const TableDataRows = [];\n\n        for (let i = 0; i < this.mockData.length; i++) {\n            const mockDataRow = this.mockData[i];\n\n            // const rowColumnData = [];\n            // /** Get the display order. */\n            // for(let j = 0; j < COLUMNS.length; j++ ) {\n            //     const columnName = COLUMNS[i];\n            //     rowColumnData.push(\n            //         <td key={j}>{mockDataRow[columnName]}</td>\n            //     )\n            // }\n\n\n            // TableDataRows.push((mockDataRow, idx) => {\n            //     return this.TableDataRow(COLUMNS.map(columnName => mockDataRow[columnName]), `row${idx}`);\n            // })\n            const rowData = COLUMNS.map(columnName => mockDataRow[columnName]);\n\n            const currentDataRow = (\n                <tr key={`row${i}`}>\n                    {rowData.map((row, idx) => {\n                        switch (idx) {\n                            case COLUMN_MAP.get('Nimbo ID'):\n                                return (\n                                    <td>\n                                        <Button color=\"primary\">\n                                            {row}\n                                        </Button>\n                                    </td>\n                                );\n                            case COLUMN_MAP.get('Company'):\n                                return (\n                                    <td>\n                                        <Button color=\"secondary\">\n                                            {row}\n                                        </Button>\n                                    </td>\n                                );\n                            case COLUMN_MAP.get('Robox'):\n                                if (row.includes('Online')) {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'green' }}>{row}</span>\n                                        </td>\n                                    );\n                                } else {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'red' }}>{row}</span>\n                                        </td>\n                                    );\n                                }\n                            case COLUMN_MAP.get('Nimbo App'):\n                                if (row.includes('Online')) {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'green' }}>{row}</span>\n                                        </td>\n                                    );\n                                } else {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'red' }}>{row}</span>\n                                        </td>\n                                    );\n                                }\n                            case COLUMN_MAP.get('Slam'):\n                                if (row.includes('Online')) {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'green' }}>{row}</span>\n                                        </td>\n                                    );\n                                } else {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'red' }}>{row}</span>\n                                        </td>\n                                    );\n                                }\n                            case COLUMN_MAP.get('Software Version'):\n                                if (row.includes('Updated')) {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'green' }}>{row}</span>\n                                        </td>\n                                    );\n                                } else {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'red' }}>{row}</span>\n                                        </td>\n                                    );\n                                }\n                            case COLUMN_MAP.get('Hardware Version'):\n                                if (row.includes('Updated')) {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'green' }}>{row}</span>\n                                        </td>\n                                    );\n                                } else {\n                                    return (\n                                        <td>\n                                            <span style={{ color: 'red' }}>{row}</span>\n                                        </td>\n                                    );\n                                }\n                            default:\n                                return <td key={idx}>{row}</td>;\n                        }\n                    })}\n                </tr>\n            );\n\n\n            TableDataRows.push(currentDataRow)\n        }\n\n        return (\n            <div className=\"table-component\">\n                <div class=\"table-wrapper\">\n                    <table>\n                        <tbody>\n                            {/** Intrapolation. */}\n                            {this.TableColumns()}\n                            {/* {this.TableDataRow(tableDataRow1, 'row1')}\n                            {this.TableDataRow(tableDataRow2, 'row1')} */}\n                            {TableDataRows}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Table;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './Header.css';\nimport { TextField, Grid } from '@material-ui/core';\n\n\nfunction Header() {\n    const headerTitle = 'Turing Sevice Dashboard';\n\n    return (\n        <Grid className=\"Header\" container direction=\"column\" >\n            <Typography component=\"h1\" variant=\"h6\" color=\"initial\" align=\"left\" marginTop=\"10\">\n                {headerTitle}\n            </Typography>\n            <TextField className=\"text-field\"\n                       label=\"Search\" \n                       variant=\"filled\" \n                       helperText=\"Please input a keyword\" \n                       fullWidth></TextField>\n        </Grid>\n    );\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './SideNav.css';\nimport { ListItem, ListItemIcon, ListItemText, Collapse, List, Divider, Typography } from '@material-ui/core';\nimport { ExpandLess, ExpandMore, MoveToInbox } from '@material-ui/icons';\n\nclass SideNav extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isDevicesCollapseOpen: true,\n            isLabelsCollapseOpen: true,\n        };\n    }\n\n    /** Modifies the collapse component. */\n    modifyDevicesCollapse() {\n        this.setState({ isDevicesCollapseOpen: !this.state.isDevicesCollapseOpen });\n    }\n    modifyLabelsCollapse() {\n        this.setState({ isLabelsCollapseOpen: !this.state.isLabelsCollapseOpen });\n    }\n\n    titleText(text) {\n        return <Typography type=\"h3\" style={{color: '#333'}}>{text}</Typography>\n    }\n\n    render() {\n        return (\n            // align 意思是在这个 div 里面的所有component额位置\n            // question: 返回的是一个 <div> html component 对吗？？？？？？？？？？？？？\n            <div className=\"sidenav-component\" align=\"center\" >\n                <ListItem button onClick={() => this.modifyDevicesCollapse()}>\n                    <ListItemIcon><MoveToInbox /></ListItemIcon>\n                    <ListItemText primary={this.titleText('Devices')} />\n                    {this.state.isDevicesCollapseOpen ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Divider />\n                <Collapse in={this.state.isDevicesCollapseOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                        <ListItem button className=\"sidenav-list-item\">\n                            Nimbo\n                        </ListItem>\n                        <ListItem button className=\"sidenav-list-item\">\n                            AiVR\n                        </ListItem>\n                    </List>\n                </Collapse>\n\n\n                <ListItem button onClick={() => this.modifyLabelsCollapse()}>\n                    <ListItemIcon><MoveToInbox /></ListItemIcon>\n                    <ListItemText primary={this.titleText('Labels')}/>\n                    {this.state.isLabelsCollapseOpen ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Divider />\n\n                <Collapse in={this.state.isLabelsCollapseOpen} timeout=\"auto\" unmountOnExit>\n                    <List component=\"div\" disablePadding>\n                        <ListItem button className=\"sidenav-list-item\">\n                            Stella's Label\n                        </ListItem>\n                        <ListItem button className=\"sidenav-list-item\">\n                            Anpu's Label\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </div>\n\n        );\n    }\n}\n\n// 一定要\nexport default SideNav;","import React from 'react';\nimport Table from './table/Table.js';\nimport Header from './header/Header.js';\nimport SideNav from './sidenav/SideNav.js';\nimport './Dashboard.css';\nimport { Grid } from '@material-ui/core';\n\n\nfunction Dashboard() {\n    return (\n        <div className=\"Dashboard\">\n            <Header />\n            {/* Question: 这里的sideNav component是 sideNavComponent 还是 Sidenav ？？？？？\n            我可以在dashobaord的 css文件里面直接 用 .Sidenav 对Sidenav component进行编辑部吗？？？？？？*/}\n            <Grid container direction=\"row\" justify=\"space-between\">\n                <SideNav />\n                <Table />\n            </Grid>\n        </div>\n    );\n}\nexport default Dashboard;\n\n\n\n","import React from 'react'; // 让程序能够返回 DOM\nimport './App.css';\nimport Navbar from './navbar/Navbar.js';\nimport Dashboard from './dashboard/Dashboard.js';\n\n/** Starting point of the component tree. */\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* 返回 */}\n      <Navbar />  \n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App.js';\nimport * as serviceWorker from './serviceWorker';\n\n/** 将React里面创造的内容,加载在id名为root的dom上面 */\n/** <App />代指 src/app/App.js的return */\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.37f4cf57.jpg\";"],"sourceRoot":""}